<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Comment">
    <insert id="save" parameterType="comment">
        insert into comment_table(commentWriter, commentContents, boardId)
        values (#{commentWriter}, #{commentContents}, #{boardId})
    </insert>
    <select id="findAll" parameterType="Long" resultType="comment">
        select id, commentWriter, commentContents,likeAmount,
               date_format(createdAt, "%y-%m-%d %H:%i:%s") as createdAt, boardId,likeMemberJson
        from comment_table where boardId = #{boardId} order by id
    </select>
    <select id="findById" parameterType="Long" resultType="comment">
        select id, commentWriter, commentContents,likeAmount,
               date_format(createdAt, "%y-%m-%d %H:%i:%s") as createdAt, boardId,likeMemberJson
        from comment_table where id = #{id}
    </select>
    <!-- 댓글 좋아요 갯수추가 -->
    <update id="updateLikeAmount" parameterType="Long">
        update comment_table set likeAmount = likeAmount + 1 where id = #{id}
    </update>
    <!-- 댓글 좋아요 갯수빼기 -->
    <update id="deleteLikeAmount" parameterType="Long">
        update comment_table set likeAmount = likeAmount - 1 where id = #{id}
    </update>
    <!--    현재 좋아요 갯수 반환받기-->
    <select id="checkLike" parameterType="Long" resultType="int">
        select likeAmount from comment_table where id = #{commentId}
    </select>
    <!--    현재 좋아요 누른사람 추가하기-->
    <update id="updateLikeMemberJson" parameterType="comment">
        UPDATE comment_table
        SET likeMemberJson = JSON_INSERT(
                IFNULL(likeMemberJson, '[]'),  -- JSON 열이 NULL이면 빈 배열로 초기화
                CONCAT('$[', JSON_LENGTH(IFNULL(likeMemberJson, '[]')), ']'),  -- 배열의 마지막에 추가
                #{likeMemberJson}
            )
        WHERE id = #{id}
    </update>
    <!--    현재 좋아요 누른사람 제거하기-->
    <update id="deleteLikeMemberJson" parameterType="String">
        UPDATE comment_table
        SET likeMemberJson = JSON_REMOVE(likeMemberJson, #{index})
        WHERE id = #{id}
    </update>
    <update id="update" parameterType="comment">
        UPDATE comment_table
        set commentContents = #{commentContents} , createdAt= NOW()
        WHERE id=#{id}
    </update>

<!--    &lt;!&ndash;    현재 좋아요 누른사람 제거하기&ndash;&gt;-->
<!--    <update id="deleteLikeMemberJson" parameterType="String">-->
<!--        UPDATE comment_table-->
<!--        SET likeMemberJson = JSON_REMOVE(likeMemberJson, #{result1})-->
<!--        WHERE id = 33-->
<!--    </update>-->

<!--    json 인덱스 찾기-->
    <select id="searchJson" parameterType="comment" resultType="String">
        SELECT JSON_SEARCH(likeMemberJson, 'one', #{likeMemberJson}) FROM comment_table WHERE id = #{id};
    </select>

    <delete id="delete" parameterType="Long">
        delete from comment_table where id=#{id}
    </delete>


</mapper>